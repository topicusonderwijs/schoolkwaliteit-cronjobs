// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: query.sql

package mysql

import (
	"context"
)

const deactivateExpiredAccountById = `-- name: DeactivateExpiredAccountById :exec
UPDATE accounts
SET active = false
WHERE id = ?
`

func (q *Queries) DeactivateExpiredAccountById(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deactivateExpiredAccountById, id)
	return err
}

const getExpiredAccounts = `-- name: GetExpiredAccounts :many
SELECT accounts.id, accounts.guid, accounts.type, accounts.contact_id, accounts.code, accounts.name, accounts.contact_name, accounts.subdomain, accounts.authority_name, accounts.authority_code, accounts.address1, accounts.address2, accounts.zipcode, accounts.city, accounts.country, accounts.email, accounts.phone, accounts.website, accounts.logo, accounts.concept_id, accounts.settings, accounts.active, accounts.customer_id, accounts.expired_on, accounts.expire_reason, accounts.deleted_at, accounts.users_count, accounts.people_count, accounts.groups_count, accounts.created_at, accounts.updated_at, accounts.parnassys, accounts.anonymized
FROM accounts
WHERE deleted_at IS NULL AND accounts.active = TRUE AND (expired_on < NOW())
`

func (q *Queries) GetExpiredAccounts(ctx context.Context) ([]Account, error) {
	rows, err := q.db.QueryContext(ctx, getExpiredAccounts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Account
	for rows.Next() {
		var i Account
		if err := rows.Scan(
			&i.ID,
			&i.Guid,
			&i.Type,
			&i.ContactID,
			&i.Code,
			&i.Name,
			&i.ContactName,
			&i.Subdomain,
			&i.AuthorityName,
			&i.AuthorityCode,
			&i.Address1,
			&i.Address2,
			&i.Zipcode,
			&i.City,
			&i.Country,
			&i.Email,
			&i.Phone,
			&i.Website,
			&i.Logo,
			&i.ConceptID,
			&i.Settings,
			&i.Active,
			&i.CustomerID,
			&i.ExpiredOn,
			&i.ExpireReason,
			&i.DeletedAt,
			&i.UsersCount,
			&i.PeopleCount,
			&i.GroupsCount,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Parnassys,
			&i.Anonymized,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
